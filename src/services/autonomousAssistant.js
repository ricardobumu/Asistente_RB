// src/services/autonomousAssistant.js
/**
 * Asistente Virtual Aut√≥nomo para Reservas
 *
 * Sistema de inteligencia artificial que gestiona reservas de servicios de belleza
 * de forma completamente autom√°tica a trav√©s de WhatsApp, integrando con:
 * - OpenAI para an√°lisis de mensajes e intenciones
 * - Calendly para gesti√≥n de disponibilidad y reservas
 * - Twilio para comunicaci√≥n por WhatsApp
 * - Supabase para persistencia de datos
 *
 * Caracter√≠sticas de seguridad:
 * - Validaci√≥n y sanitizaci√≥n de todas las entradas
 * - Rate limiting por usuario
 * - Gesti√≥n de memoria con l√≠mites
 * - Logging seguro sin exposici√≥n de datos sensibles
 * - Cumplimiento con RGPD en manejo de datos personales
 *
 * @author Ricardo Buritic√°
 * @version 2.0.0
 * @since 2024
 */

const openaiClient = require("../integrations/openaiClient");
const calendlyClient = require("../integrations/calendlyClient");
const twilioClient = require("../integrations/twilioClient");
const ClientService = require("./clientService");
const ServiceService = require("./serviceService");
const DatabaseAdapter = require("../adapters/databaseAdapter");
const logger = require("../utils/logger");
const ConversationContextService = require("./conversationContextService");
const Validators = require("../utils/validators");

/**
 * Clase principal del Asistente Virtual Aut√≥nomo
 *
 * Gestiona el flujo completo de reservas autom√°ticas:
 * 1. Recibe mensajes de WhatsApp
 * 2. Analiza intenciones con IA
 * 3. Extrae informaci√≥n necesaria
 * 4. Verifica disponibilidad en Calendly
 * 5. Crea reservas autom√°ticamente
 * 6. Env√≠a confirmaciones y recordatorios
 *
 * @class AutonomousAssistant
 */
class AutonomousAssistant {
  /**
   * Inicializa el Asistente Virtual Aut√≥nomo
   *
   * Configura:
   * - Cache de conversaciones con l√≠mites de memoria
   * - Sistema de rate limiting
   * - Cache de servicios con actualizaci√≥n autom√°tica
   * - Prompt del sistema para IA
   *
   * @constructor
   */
  constructor() {
    /** @type {ConversationContextService} Servicio para gestionar el contexto de las conversaciones */
    this.contextService = ConversationContextService;

    /** @type {Array<Object>|null} Cache de servicios disponibles */
    this.services = null;

    /** @type {string|null} Prompt del sistema para OpenAI */
    this.systemPrompt = null;

    // Inicializaci√≥n as√≠ncrona
    this.initializeServices();
    this.startCacheRefreshScheduler();
  }

  /**
   * Inicializa cache de servicios
   */
  async initializeServices() {
    try {
      const result = await ServiceService.getActiveServices();
      if (result.success) {
        this.services = result.data;
        this.systemPrompt = this.buildSystemPrompt(); // Construir prompt despu√©s de cargar servicios
        logger.info("Services cache initialized", {
          count: this.services.length,
        });
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      logger.error("Failed to initialize services cache", {
        error: error.message,
      });
      this.services = [];
      this.systemPrompt = this.buildSystemPrompt(); // Construir con servicios vac√≠os
    }
  }

  /**
   * Construye el prompt del sistema para el asistente
   */
  buildSystemPrompt() {
    const servicesText = this.services
      ? this.services
          .map((s) => `- ${s.name} (${s.duration_minutes} min, ‚Ç¨${s.price})`)
          .join("\n")
      : "- Servicios carg√°ndose...";

    return `Eres un asistente virtual AUT√ìNOMO para Ricardo Buritic√°, especialista en servicios de belleza.

OBJETIVO: Gestionar reservas de manera completamente autom√°tica sin intervenci√≥n humana.

PERSONALIDAD:
- Profesional, amable y eficiente
- Experto en servicios de belleza
- Proactivo en completar reservas
- Claro y directo en comunicaci√≥n

SERVICIOS DISPONIBLES:
${servicesText}

PROCESO AUTOM√ÅTICO:
1. Identificar intenci√≥n del cliente
2. Extraer informaci√≥n necesaria (servicio, fecha, hora, datos cliente)
3. Verificar disponibilidad en Calendly
4. Crear reserva autom√°ticamente
5. Confirmar por WhatsApp
6. Programar recordatorios

REGLAS CR√çTICAS:
- SIEMPRE completar reservas autom√°ticamente cuando sea posible
- NUNCA inventar horarios - solo usar datos reales de Calendly
- Si falta informaci√≥n, preguntar de forma directa y espec√≠fica
- Ofrecer alternativas si no hay disponibilidad
- Si el cliente quiere hablar con un humano, usar la intenci√≥n 'direct_contact_request'
- Confirmar TODOS los datos antes de crear reserva

FORMATO DE RESPUESTA:
- Mensajes cortos y claros
- Usar emojis para mejor experiencia
- Incluir toda la informaci√≥n relevante
- Ser proactivo en sugerir pr√≥ximos pasos

Si no puedes resolver algo autom√°ticamente, indica: "Te conectar√© con Ricardo para ayudarte mejor."`;
  }

  /**
   * Procesa mensaje de WhatsApp de forma aut√≥noma con validaciones de seguridad
   */
  async processWhatsAppMessage(phoneNumber, message, messageId) {
    try {
      // Validaciones de seguridad iniciales
      if (!Validators.validatePhoneNumber(phoneNumber)) {
        logger.warn("Invalid phone number received", {
          phoneNumber: this.sanitizePhoneForLog(phoneNumber),
          messageId,
        });
        return { success: false, error: "Invalid phone number" };
      }

      // Rate limiting
      if (!this.checkRateLimit(phoneNumber)) {
        logger.warn("Rate limit exceeded", {
          phoneNumber: this.sanitizePhoneForLog(phoneNumber),
          messageId,
        });
        await this.sendWhatsAppMessage(
          phoneNumber,
          "Has enviado muchos mensajes muy r√°pido. Por favor, espera un momento antes de continuar. üòä"
        );
        return { success: false, error: "Rate limit exceeded" };
      }

      // Validar mensaje
      if (!message || typeof message !== "string" || message.length > 1000) {
        logger.warn("Invalid message received", {
          phoneNumber: this.sanitizePhoneForLog(phoneNumber),
          messageLength: message?.length,
          messageId,
        });
        await this.sendWhatsAppMessage(
          phoneNumber,
          "Por favor, env√≠a un mensaje v√°lido de m√°ximo 1000 caracteres. üòä"
        );
        return { success: false, error: "Invalid message" };
      }

      // Sanitizar mensaje
      const sanitizedMessage = Validators.sanitizeText(message);

      logger.info("Processing autonomous WhatsApp message", {
        phoneNumber: this.sanitizePhoneForLog(phoneNumber),
        messageId,
        messageLength: sanitizedMessage.length,
      });

      // Obtener contexto de conversaci√≥n
      const context = this.contextService.getConversationContext(phoneNumber);

      // Analizar mensaje con IA
      const analysis = await this.analyzeMessage(sanitizedMessage, context);

      // Procesar seg√∫n el an√°lisis
      let response;
      switch (analysis.intent) {
        case "booking_request":
          response = await this.handleBookingRequest(
            phoneNumber,
            analysis,
            context
          );
          break;
        case "availability_inquiry":
          response = await this.handleAvailabilityInquiry(analysis, context);
          break;
        case "booking_modification":
          response = await this.handleBookingModification(
            phoneNumber,
            analysis,
            context
          );
          break;
        case "service_information":
          response = await this.handleServiceInformation(analysis);
          break;
        case "greeting":
          response = await this.handleGreeting(phoneNumber);
          break;
        case "direct_contact_request":
          response = await this.handleDirectContactRequest(
            phoneNumber,
            sanitizedMessage
          );
          break;
        default:
          response = await this.handleGeneralInquiry(sanitizedMessage, context);
      }

      // Validar respuesta antes de enviar
      if (!response || typeof response !== "string") {
        response =
          "Disculpa, he tenido un problema procesando tu mensaje. ¬øPodr√≠as intentar de nuevo? üòä";
      }

      // Limitar longitud de respuesta
      if (response.length > 1600) {
        response =
          response.substring(0, 1500) + "...\n\n¬øNecesitas m√°s informaci√≥n? üòä";
      }

      // Actualizar contexto
      this.contextService.updateConversationContext(
        phoneNumber,
        sanitizedMessage,
        response,
        analysis
      );

      // Enviar respuesta
      await this.sendWhatsAppMessage(phoneNumber, response);

      return { success: true, response };
    } catch (error) {
      logger.error("Error in autonomous message processing", {
        error: error.message,
        phoneNumber,
        messageId,
      });

      const errorResponse =
        "Disculpa, he tenido un problema t√©cnico. Te conectar√© con Ricardo enseguida.";
      await this.sendWhatsAppMessage(phoneNumber, errorResponse);

      // Notificar error al administrador
      await this.notifyAdmin("Autonomous assistant error", {
        phoneNumber,
        error: error.message,
      });

      throw error;
    }
  }

  /**
   * Analiza mensaje usando OpenAI con function calling avanzado
   */
  async analyzeMessage(message, context) {
    try {
      // Usar el nuevo cliente con function calling
      const analysis = await openaiClient.analyzeMessageWithFunctions(
        message,
        context
      );

      if (analysis.type === "function_call") {
        // El mensaje requiere una acci√≥n espec√≠fica
        return await this.handleFunctionCall(analysis);
      } else {
        // An√°lisis tradicional de intenci√≥n
        return await openaiClient.analyzeIntent(message, context);
      }
    } catch (error) {
      logger.error("Error analyzing message with functions", {
        error: error.message,
      });

      // Fallback al m√©todo tradicional
      try {
        const prompt = `Analiza este mensaje de WhatsApp y extrae la informaci√≥n para reservas:

MENSAJE: "${message}"
CONTEXTO PREVIO: ${JSON.stringify(context.extractedData || {})}

Responde SOLO con un objeto JSON v√°lido:
{
  "intent": "booking_request|availability_inquiry|booking_modification|service_information|greeting|general_inquiry",
  "confidence": 0.0-1.0,
  "entities": {
    "service": "corte|coloracion|tratamiento|manicura|pedicura|null",
    "date": "fecha_extraida|null",
    "time": "hora_extraida|null", 
    "client_name": "nombre_extraido|null",
    "phone": "telefono_extraido|null",
    "email": "email_extraido|null"
  },
  "missing_info": ["campo1", "campo2"],
  "urgency": "low|medium|high",
  "ready_to_book": true|false
}`;

        const response = await openaiClient.chat(
          [
            {
              role: "system",
              content:
                "Eres un analizador experto de intenciones para reservas de servicios de belleza.",
            },
            { role: "user", content: prompt },
          ],
          {
            model: "gpt-4-turbo-preview",
            temperature: 0.1,
            max_tokens: 400,
          }
        );

        return JSON.parse(response.choices[0].message.content);
      } catch (fallbackError) {
        logger.error("Fallback analysis also failed", {
          error: fallbackError.message,
        });
        return {
          intent: "general_inquiry",
          confidence: 0.5,
          entities: {},
          missing_info: [],
          urgency: "medium",
          ready_to_book: false,
        };
      }
    }
  }

  /**
   * Maneja llamadas a funciones de OpenAI
   */
  async handleFunctionCall(analysis) {
    const { function_name, arguments: args } = analysis;

    try {
      switch (function_name) {
        case "check_availability":
          const availability = await this.checkCalendlyAvailability(
            args.service_name,
            args.date,
            args.time
          );
          return {
            intent: "availability_inquiry",
            confidence: 0.9,
            entities: args,
            missing_info: [],
            urgency: "medium",
            ready_to_book: availability.available,
            function_result: availability,
          };

        case "create_booking":
          return {
            intent: "booking_request",
            confidence: 0.95,
            entities: args,
            missing_info: [],
            urgency: "high",
            ready_to_book: true,
            function_result: { action: "create_booking", data: args },
          };

        case "get_available_slots":
          const slots = await this.getAvailableSlots(
            args.service_name,
            args.from_date,
            args.days_ahead || 7
          );
          return {
            intent: "availability_inquiry",
            confidence: 0.9,
            entities: args,
            missing_info: [],
            urgency: "medium",
            ready_to_book: false,
            function_result: slots,
          };

        default:
          logger.warn("Unknown function call", { function_name });
          return {
            intent: "general_inquiry",
            confidence: 0.5,
            entities: {},
            missing_info: [],
            urgency: "medium",
            ready_to_book: false,
          };
      }
    } catch (error) {
      logger.error("Error handling function call", {
        error: error.message,
        function_name,
        arguments: args,
      });
      return {
        intent: "general_inquiry",
        confidence: 0.3,
        entities: {},
        missing_info: [],
        urgency: "medium",
        ready_to_book: false,
        error: error.message,
      };
    }
  }

  /**
   * Maneja solicitudes de reserva de forma aut√≥noma con validaciones completas
   */
  async handleBookingRequest(phoneNumber, analysis, context) {
    try {
      const { entities, missing_info, ready_to_book } = analysis;

      // Combinar datos del an√°lisis actual con contexto previo
      const bookingData = {
        ...context.extractedData,
        ...entities,
        phone: phoneNumber,
      };

      // Sanitizar datos del cliente
      if (bookingData.client_name) {
        bookingData.client_name = Validators.sanitizeText(
          bookingData.client_name
        );
      }
      if (bookingData.email) {
        bookingData.email = Validators.sanitizeText(bookingData.email);
      }

      // Validar datos del cliente
      const validation = Validators.validateClientData(bookingData);
      if (!validation.isValid) {
        this.contextService.updateConversationContext(phoneNumber, null, null, {
          extractedData: bookingData,
        });
        return `Para completar tu reserva necesito:\n\n${validation.errors
          .map((e) => `‚ùå ${e}`)
          .join("\n")}\n\n¬øPodr√≠as proporcionar esta informaci√≥n? üòä`;
      }

      // Si falta informaci√≥n cr√≠tica, solicitarla
      if (!ready_to_book || missing_info.length > 0) {
        this.contextService.updateConversationContext(phoneNumber, null, null, {
          extractedData: bookingData,
        });
        return this.requestMissingInformation(missing_info, bookingData);
      }

      // Verificar disponibilidad en Calendly
      const availability = await this.checkCalendlyAvailability(
        bookingData.service,
        bookingData.date,
        bookingData.time
      );

      if (!availability.available) {
        return await this.suggestAlternativeSlots(
          bookingData.service,
          bookingData.date
        );
      }

      // Crear reserva autom√°ticamente
      const booking = await this.createAutomaticBooking(
        phoneNumber,
        bookingData,
        availability
      );

      // Limpiar contexto despu√©s de reserva exitosa
      this.contextService.clearConversationContext(phoneNumber);

      return this.formatBookingConfirmation(booking);
    } catch (error) {
      logger.error("Error handling booking request", {
        error: error.message,
        phoneNumber,
      });
      return "He tenido un problema al procesar tu reserva. Te conectar√© con Ricardo para ayudarte mejor.";
    }
  }

  /**
   * Verifica disponibilidad en Calendly
   */
  async checkCalendlyAvailability(serviceName, date, time) {
    try {
      // Buscar servicio en cache
      const service = this.services.find((s) =>
        s.name.toLowerCase().includes(serviceName.toLowerCase())
      );

      if (!service) {
        throw new Error(`Service not found: ${serviceName}`);
      }

      // Formatear datetime para Calendly
      const datetime = `${date}T${time}:00`;

      // Consultar disponibilidad
      const slots = await calendlyClient.getAvailability({
        event_type: service.calendly_event_type,
        start_time: datetime,
        duration: service.duration,
      });

      return {
        available: slots.length > 0,
        slots,
        service,
        datetime,
      };
    } catch (error) {
      logger.error("Error checking Calendly availability", {
        error: error.message,
      });
      return { available: false, slots: [], service: null };
    }
  }

  /**
   * Crea reserva autom√°tica sin intervenci√≥n humana
   */
  async createAutomaticBooking(phoneNumber, bookingData, availability) {
    try {
      // Obtener o crear cliente
      let clientResult = await ClientService.findByPhone(phoneNumber);
      let client = clientResult.data;

      if (!client) {
        const createResult = await ClientService.createClient({
          first_name: bookingData.client_name || "Cliente",
          last_name: bookingData.last_name || "",
          phone: phoneNumber,
          email:
            bookingData.email || `${phoneNumber.replace("+", "")}@temp.com`,
          whatsapp_phone: phoneNumber,
          lgpd_accepted: true,
          registration_complete: true,
        });

        if (!createResult.success) {
          throw new Error(`Error creating client: ${createResult.error}`);
        }
        client = createResult.data;
      }

      // Crear reserva en Calendly
      const calendlyBooking = await calendlyClient.createBooking({
        event_type_uuid: availability.service.calendly_event_type || "default",
        start_time: availability.datetime,
        invitee: {
          name: `${client.first_name} ${client.last_name}`.trim(),
          email: client.email,
          phone: phoneNumber,
        },
      });

      // Crear reserva en nuestro sistema
      const bookingResult = await DatabaseAdapter.insert("bookings", {
        client_id: client.id,
        service_id: availability.service.id,
        scheduled_at: `${bookingData.date}T${bookingData.time}:00`,
        status: "confirmada",
        booking_url: calendlyBooking?.uri || null,
        notes: "Reserva creada autom√°ticamente por asistente IA",
      });

      if (!bookingResult.success) {
        throw new Error(`Error creating booking: ${bookingResult.error}`);
      }

      const booking = bookingResult.data[0];

      // Programar recordatorios autom√°ticos
      await this.scheduleAutomaticReminders(booking, client);

      logger.info("Automatic booking created successfully", {
        bookingId: booking.id,
        clientId: client.id,
        service: availability.service.name,
        phoneNumber,
      });

      return { booking, client, service: availability.service };
    } catch (error) {
      logger.error("Error creating automatic booking", {
        error: error.message,
      });
      throw error;
    }
  }

  /**
   * Programa recordatorios autom√°ticos
   */
  async scheduleAutomaticReminders(booking, client) {
    try {
      const reminders = [
        {
          hours: 24,
          message: `üîî Recordatorio: Tienes una cita ma√±ana\n\nüìÖ ${booking.service_name}\nüóìÔ∏è ${booking.date}\n‚è∞ ${booking.time}\n\n¬°Te esperamos! üòä`,
        },
        {
          hours: 2,
          message: `‚è∞ Tu cita es en 2 horas\n\nüìÖ ${booking.service_name}\nüóìÔ∏è Hoy a las ${booking.time}\n\nüìç Recuerda la ubicaci√≥n del sal√≥n.`,
        },
        {
          hours: 0.5,
          message: `üö® ¬°Tu cita es en 30 minutos!\n\nüìÖ ${booking.service_name}\n‚è∞ ${booking.time}\n\n¬°Nos vemos pronto! üéâ`,
        },
      ];

      // Aqu√≠ implementar√≠as la l√≥gica de programaci√≥n
      // Por ejemplo, usando cron jobs o un sistema de colas
      for (const reminder of reminders) {
        // await reminderService.schedule(booking.id, reminder);
      }

      this.logger.info("Automatic reminders scheduled", {
        bookingId: booking.id,
        remindersCount: reminders.length,
      });
    } catch (error) {
      this.logger.error("Error scheduling automatic reminders", {
        error: error.message,
        bookingId: booking.id,
      });
    }
  }

  /**
   * Solicita informaci√≥n faltante de forma inteligente
   */
  requestMissingInformation(missingInfo, currentData) {
    const questions = {
      service:
        "¬øQu√© servicio necesitas? üíá‚Äç‚ôÇÔ∏è\n\nüîπ Corte de cabello (‚Ç¨25)\nüîπ Coloraci√≥n (‚Ç¨45)\nüîπ Tratamiento capilar (‚Ç¨35)\nüîπ Manicura (‚Ç¨20)\nüîπ Pedicura (‚Ç¨25)",
      date: "¬øPara qu√© fecha? üìÖ\n\nPuedes decir: 'ma√±ana', 'el viernes', '15 de marzo', etc.",
      time: "¬øA qu√© hora prefieres? ‚è∞\n\nEjemplo: '10:00', 'por la ma√±ana', 'despu√©s de las 14:00'",
      client_name: "¬øCu√°l es tu nombre para la reserva? üòä",
      email: "¬øTu email para enviarte la confirmaci√≥n? üìß",
    };

    const firstMissing = missingInfo[0];
    const question =
      questions[firstMissing] ||
      "Necesito m√°s informaci√≥n para completar tu reserva.";

    let response = `Para completar tu reserva autom√°ticamente:\n\n${question}`;

    // Mostrar informaci√≥n ya recopilada
    if (Object.keys(currentData).length > 0) {
      response += "\n\nüìã **Informaci√≥n actual:**";
      if (currentData.service)
        response += `\n‚úÖ Servicio: ${currentData.service}`;
      if (currentData.date) response += `\n‚úÖ Fecha: ${currentData.date}`;
      if (currentData.time) response += `\n‚úÖ Hora: ${currentData.time}`;
      if (currentData.client_name)
        response += `\n‚úÖ Nombre: ${currentData.client_name}`;
    }

    return response;
  }

  /**
   * Sugiere horarios alternativos cuando no hay disponibilidad
   */
  async suggestAlternativeSlots(serviceName, requestedDate) {
    try {
      const service = this.services.find((s) =>
        s.name.toLowerCase().includes(serviceName.toLowerCase())
      );

      if (!service) {
        return "No he encontrado ese servicio. ¬øPodr√≠as especificar cu√°l necesitas?";
      }

      // Buscar alternativas en los pr√≥ximos 7 d√≠as
      const alternatives = await this.calendlyClient.getAvailability({
        event_type: service.calendly_event_type,
        start_date: requestedDate,
        days_ahead: 7,
      });

      if (alternatives.length === 0) {
        return `Lo siento, no tengo disponibilidad para ${serviceName} en los pr√≥ximos d√≠as. üòî\n\n¬øTe gustar√≠a que Ricardo te contacte directamente para encontrar un horario?`;
      }

      let response = `No tengo disponibilidad exacta para esa hora, pero tengo estas alternativas para ${serviceName}:\n\n`;

      alternatives.slice(0, 3).forEach((slot, index) => {
        const date = new Date(slot.start_time).toLocaleDateString("es-ES");
        const time = new Date(slot.start_time).toLocaleTimeString("es-ES", {
          hour: "2-digit",
          minute: "2-digit",
        });
        response += `${index + 1}. üìÖ ${date} a las ‚è∞ ${time}\n`;
      });

      response += "\n¬øCu√°l prefieres? Solo responde con el n√∫mero. üòä";
      return response;
    } catch (error) {
      this.logger.error("Error suggesting alternatives", {
        error: error.message,
      });
      return "D√©jame consultar las opciones disponibles y te contacto enseguida.";
    }
  }

  /**
   * Formatea confirmaci√≥n de reserva
   */
  formatBookingConfirmation(bookingResult) {
    const { booking, client, service } = bookingResult;

    return `‚úÖ ¬°RESERVA CONFIRMADA AUTOM√ÅTICAMENTE!

üìÖ **${service.name}**
üóìÔ∏è Fecha: ${booking.date}
‚è∞ Hora: ${booking.time}
üí∞ Precio: ‚Ç¨${booking.price}
‚è±Ô∏è Duraci√≥n: ${booking.duration} min

üë§ Cliente: ${client.name}
üì± Tel√©fono: ${client.phone}

üìç **Ubicaci√≥n**: [Direcci√≥n del sal√≥n]

üîî **Recordatorios autom√°ticos:**
‚Ä¢ 24 horas antes
‚Ä¢ 2 horas antes  
‚Ä¢ 30 minutos antes

Para cambios, escr√≠beme con al menos 24h de antelaci√≥n.

¬°Nos vemos pronto! üéâ`;
  }

  /**
   * Maneja saludos de forma personalizada y segura
   */
  async handleGreeting(phoneNumber) {
    try {
      // Validar n√∫mero de tel√©fono
      if (!this.Validators.validatePhoneNumber(phoneNumber)) {
        this.logger.warn("Invalid phone number in greeting", { phoneNumber });
        return "¬°Hola! üëã Soy tu asistente virtual para reservas. ¬øEn qu√© puedo ayudarte?";
      }

      const clientResult = await this.ClientService.findByPhone(phoneNumber);
      const client = clientResult.success ? clientResult.data : null;

      // Sanitizar nombre del cliente
      const clientName = client?.first_name
        ? this.Validators.sanitizeText(client.first_name)
        : null;

      const greeting = clientName
        ? `¬°Hola ${clientName}! üëã Me alegra verte de nuevo.`
        : "¬°Hola! üëã Soy tu asistente virtual para reservas.";

      const servicesMenu = this.getServicesMenu();

      return `${greeting}

Puedo ayudarte a reservar una cita autom√°ticamente. Solo dime:

üîπ Qu√© servicio necesitas
üîπ Para qu√© fecha y hora
üîπ Tu nombre

¬°Y yo me encargo del resto! üòä

${servicesMenu}`;
    } catch (error) {
      this.logger.error("Error in handleGreeting", {
        error: error.message,
        phoneNumber: this.sanitizePhoneForLog(phoneNumber),
      });
      return "¬°Hola! üëã Soy tu asistente virtual para reservas. ¬øEn qu√© puedo ayudarte?";
    }
  }

  /**
   * Env√≠a mensaje por WhatsApp con validaciones de seguridad
   */
  async sendWhatsAppMessage(phoneNumber, message) {
    try {
      // Validaciones de seguridad
      if (!this.Validators.validatePhoneNumber(phoneNumber)) {
        throw new Error("Invalid phone number for WhatsApp message");
      }

      if (!message || typeof message !== "string") {
        throw new Error("Invalid message content");
      }

      // Limitar longitud del mensaje (WhatsApp tiene l√≠mite de ~4096 caracteres)
      const truncatedMessage =
        message.length > 1600
          ? message.substring(0, 1500) + "...\n\n¬øNecesitas m√°s informaci√≥n? üòä"
          : message;

      // Verificar configuraci√≥n de Twilio
      if (!process.env.TWILIO_WHATSAPP_NUMBER) {
        throw new Error("Twilio WhatsApp number not configured");
      }

      await this.twilioClient.messages.create({
        from: process.env.TWILIO_WHATSAPP_NUMBER,
        to: "whatsapp:" + phoneNumber,
        body: truncatedMessage,
      });

      this.logger.info("Autonomous WhatsApp message sent", {
        phoneNumber: this.sanitizePhoneForLog(phoneNumber),
        messageLength: truncatedMessage.length,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      this.logger.error("Error sending autonomous WhatsApp message", {
        error: error.message,
        phoneNumber: this.sanitizePhoneForLog(phoneNumber),
        timestamp: new Date().toISOString(),
      });
      throw error;
    }
  }

  /**
   * Notifica al administrador
   */
  async notifyAdmin(subject, data) {
    const adminPhone = process.env.ADMIN_PHONE_NUMBER;
    if (!adminPhone) {
      this.logger.error(
        "ADMIN_PHONE_NUMBER not configured. Cannot send admin alert."
      );
      return;
    }

    try {
      this.logger.warn("Sending admin notification", { subject, data });

      const message = `üö® ALERTA: ${subject}\n\n${
        typeof data === "object" ? JSON.stringify(data, null, 2) : data
      }`;

      await this.twilioClient.messages.create({
        from: process.env.TWILIO_WHATSAPP_NUMBER,
        to: `whatsapp:${adminPhone}`,
        body: message.substring(0, 1600), // Truncar mensaje por si es muy largo
      });
    } catch (error) {
      this.logger.error("Error notifying admin", { error: error.message });
    }
  }

  /**
   * Maneja consultas generales
   */
  async handleGeneralInquiry(message, context) {
    try {
      const response = await this.openaiClient.generateResponse(
        this.systemPrompt + "\n\nUsuario: " + message,
        context
      );
      return response;
    } catch (error) {
      this.logger.error("Error handling general inquiry", {
        error: error.message,
      });
      return "¬øPodr√≠as reformular tu consulta? Estoy aqu√≠ para ayudarte con reservas de servicios de belleza. üòä";
    }
  }

  /**
   * Maneja la solicitud de contacto directo con un humano.
   */
  async handleDirectContactRequest(phoneNumber, message) {
    try {
      // Obtener nombre del cliente si existe para una notificaci√≥n m√°s personalizada
      const clientResult = await this.ClientService.findByPhone(phoneNumber);
      const clientName =
        clientResult.success && clientResult.data
          ? clientResult.data.first_name
          : "un cliente";

      // Notificar al administrador
      const adminNotification = `El cliente ${clientName} (${this.sanitizePhoneForLog(
        phoneNumber
      )}) quiere hablar contigo.\n\nMensaje: "${message}"`;
      await this.notifyAdmin(
        "Solicitud de Contacto Directo",
        adminNotification
      );

      // Respuesta al usuario
      return `¬°Entendido! He notificado a Ricardo que quieres hablar con √©l. Te contactar√° lo antes posible. üòä\n\nMientras tanto, ¬øpuedo ayudarte con algo m√°s?`;
    } catch (error) {
      this.logger.error("Error handling direct contact request", {
        error: error.message,
        phoneNumber,
      });
      return "He tenido un problema al notificar a Ricardo, pero he registrado tu solicitud. Te contactar√° pronto.";
    }
  }

  /**
   * Maneja consultas de disponibilidad
   */
  async handleAvailabilityInquiry(analysis, context) {
    try {
      const { entities } = analysis;

      if (!entities.service) {
        return (
          "¬øPara qu√© servicio quieres consultar disponibilidad? ü§î\n\n" +
          this.getServicesMenu()
        );
      }

      if (!entities.date) {
        return `Para consultar disponibilidad de ${entities.service}, ¬øpara qu√© fecha? üìÖ\n\nPuedes decir: 'ma√±ana', 'el viernes', '15 de marzo', etc.`;
      }

      // Obtener slots disponibles
      const slots = await this.getAvailableSlots(
        entities.service,
        entities.date,
        7
      );

      if (!slots.success || slots.slots.length === 0) {
        return `No tengo disponibilidad para ${entities.service} en esa fecha. üòî\n\n¬øTe gustar√≠a ver otras fechas disponibles?`;
      }

      let response = `üìÖ **Disponibilidad para ${entities.service}:**\n\n`;

      slots.slots.slice(0, 5).forEach((slot, index) => {
        const date = new Date(slot.start_time).toLocaleDateString("es-ES");
        const time = new Date(slot.start_time).toLocaleTimeString("es-ES", {
          hour: "2-digit",
          minute: "2-digit",
        });
        response += `${index + 1}. üìÖ ${date} a las ‚è∞ ${time}\n`;
      });

      response +=
        "\n¬øTe interesa alguno de estos horarios? Solo dime el n√∫mero o la fecha/hora que prefieres. üòä";

      return response;
    } catch (error) {
      this.logger.error("Error handling availability inquiry", {
        error: error.message,
      });
      return "D√©jame consultar la disponibilidad y te respondo enseguida.";
    }
  }

  /**
   * Maneja modificaciones de reservas
   */
  async handleBookingModification(phoneNumber, analysis, context) {
    try {
      // Buscar reservas activas del cliente
      const clientResult = await this.ClientService.findByPhone(phoneNumber);
      if (!clientResult.success) {
        return "No encuentro reservas asociadas a este n√∫mero. ¬øPodr√≠as verificar tu informaci√≥n?";
      }

      const client = clientResult.data;

      // Obtener reservas activas
      const { data: bookings } = await this.DatabaseAdapter.query(
        "SELECT * FROM bookings WHERE client_id = ? AND status IN ('confirmed', 'pending') AND service_date >= NOW() ORDER BY service_date ASC",
        [client.id]
      );

      if (!bookings || bookings.length === 0) {
        return "No tienes reservas activas para modificar. ¬øQuieres hacer una nueva reserva?";
      }

      let response = "üìã **Tus reservas activas:**\n\n";

      bookings.forEach((booking, index) => {
        const date = new Date(booking.service_date).toLocaleDateString("es-ES");
        const time = new Date(booking.service_date).toLocaleTimeString(
          "es-ES",
          {
            hour: "2-digit",
            minute: "2-digit",
          }
        );
        response += `${index + 1}. ${
          booking.service_name
        } - ${date} a las ${time}\n`;
      });

      response += "\n¬øCu√°l quieres modificar? Responde con el n√∫mero.";

      // Guardar reservas en contexto para pr√≥xima interacci√≥n
      context.extractedData.activeBookings = bookings;

      return response;
    } catch (error) {
      this.logger.error("Error handling booking modification", {
        error: error.message,
      });
      return "He tenido un problema consultando tus reservas. Te conectar√© con Ricardo para ayudarte.";
    }
  }

  /**
   * Maneja informaci√≥n de servicios
   */
  async handleServiceInformation(analysis) {
    try {
      const { entities } = analysis;

      if (entities.service) {
        // Buscar servicio espec√≠fico
        const service = this.services.find((s) =>
          s.name.toLowerCase().includes(entities.service.toLowerCase())
        );

        if (service) {
          return (
            `üíá‚Äç‚ôÇÔ∏è **${service.name}**\n\n` +
            `üí∞ Precio: ‚Ç¨${service.price}\n` +
            `‚è±Ô∏è Duraci√≥n: ${service.duration_minutes} minutos\n` +
            `üìù ${
              service.description || "Servicio profesional de belleza"
            }\n\n` +
            `¬øTe gustar√≠a reservar este servicio? üòä`
          );
        }
      }

      // Mostrar todos los servicios
      return this.getServicesMenu();
    } catch (error) {
      this.logger.error("Error handling service information", {
        error: error.message,
      });
      return "D√©jame consultar la informaci√≥n de servicios y te respondo enseguida.";
    }
  }

  /**
   * Obtiene men√∫ de servicios
   */
  getServicesMenu() {
    if (!this.services || this.services.length === 0) {
      return "üîÑ Cargando servicios disponibles...";
    }

    let menu = "üíá‚Äç‚ôÇÔ∏è **Servicios disponibles:**\n\n";

    this.services.forEach((service) => {
      menu += `üîπ **${service.name}**\n`;
      menu += `   üí∞ ‚Ç¨${service.price} | ‚è±Ô∏è ${service.duration_minutes}min\n`;
      if (service.description) {
        menu += `   üìù ${service.description}\n`;
      }
      menu += "\n";
    });

    menu += "¬øCu√°l te interesa? üòä";

    return menu;
  }

  /**
   * Obtener slots disponibles (wrapper para calendlyClient)
   */
  async getAvailableSlots(serviceName, fromDate, daysAhead = 7) {
    try {
      // Validar par√°metros de entrada
      if (!serviceName || !fromDate) {
        throw new Error("Service name and from date are required");
      }

      // Limitar d√≠as hacia adelante para prevenir consultas excesivas
      const maxDaysAhead = Math.min(daysAhead, 30);

      return await this.calendlyClient.getAvailableSlots(
        serviceName,
        fromDate,
        maxDaysAhead
      );
    } catch (error) {
      this.logger.error("Error getting available slots", {
        error: error.message,
        serviceName: this.Validators.sanitizeText(serviceName),
        fromDate,
      });
      return {
        success: false,
        error: error.message,
        slots: [],
      };
    }
  }

  /**
   * Sanitiza n√∫mero de tel√©fono para logs (oculta parte del n√∫mero)
   */
  sanitizePhoneForLog(phoneNumber) {
    if (!phoneNumber || phoneNumber.length < 8) {
      return "***";
    }

    const start = phoneNumber.substring(0, 3);
    const end = phoneNumber.substring(phoneNumber.length - 2);
    return `${start}***${end}`;
  }

  /**
   * Implementa rate limiting b√°sico por n√∫mero de tel√©fono
   */
  checkRateLimit(phoneNumber) {
    const now = Date.now();
    const windowMs = 60000; // 1 minuto
    const maxRequests = 10; // m√°ximo 10 mensajes por minuto

    if (!this.rateLimitMap) {
      this.rateLimitMap = new Map();
    }

    const userRequests = this.rateLimitMap.get(phoneNumber) || [];
    const recentRequests = userRequests.filter((time) => now - time < windowMs);

    if (recentRequests.length >= maxRequests) {
      return false;
    }

    recentRequests.push(now);
    this.rateLimitMap.set(phoneNumber, recentRequests);

    // Limpiar entradas antiguas cada 5 minutos
    if (Math.random() < 0.1) {
      this.cleanupRateLimit();
    }

    return true;
  }

  /**
   * Limpia entradas antiguas del rate limiting
   */
  cleanupRateLimit() {
    if (!this.rateLimitMap) return;

    const now = Date.now();
    const windowMs = 60000;

    for (const [phoneNumber, requests] of this.rateLimitMap.entries()) {
      const recentRequests = requests.filter((time) => now - time < windowMs);
      if (recentRequests.length === 0) {
        this.rateLimitMap.delete(phoneNumber);
      } else {
        this.rateLimitMap.set(phoneNumber, recentRequests);
      }
    }
  }

  /**
   * Actualiza cache de servicios de forma segura
   */
  async refreshServicesCache() {
    try {
      const result = await this.ServiceService.getActiveServices();
      if (result.success && Array.isArray(result.data)) {
        this.services = result.data;
        this.systemPrompt = this.buildSystemPrompt();
        this.logger.info("Services cache refreshed", {
          count: this.services.length,
          timestamp: new Date().toISOString(),
        });
        return true;
      }
      return false;
    } catch (error) {
      this.logger.error("Error refreshing services cache", {
        error: error.message,
      });
      return false;
    }
  }

  /**
   * Programa actualizaci√≥n autom√°tica del cache
   */
  startCacheRefreshScheduler() {
    // Actualizar cache cada 30 minutos
    setInterval(() => {
      this.refreshServicesCache();
    }, 30 * 60 * 1000);
  }
}

module.exports = new AutonomousAssistant({
  openaiClient,
  calendlyClient,
  twilioClient,
  ClientService,
  ServiceService,
  DatabaseAdapter,
  logger,
  ConversationContextService,
  Validators,
});
