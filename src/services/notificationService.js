// src/services/notificationService.js
// Servicio de notificaciones integrado con Twilio, Email y WhatsApp

const twilioClient = require("../integrations/twilioClient");
const notificationModel = require("../models/notificationModel");
const logger = require("../utils/logger");

class NotificationService {
  constructor() {
    this.channels = {
      WHATSAPP: "whatsapp",
      SMS: "sms",
      EMAIL: "email",
    };

    this.templates = {
      BOOKING_CONFIRMATION: "booking_confirmation",
      BOOKING_REMINDER: "booking_reminder",
      BOOKING_CANCELLATION: "booking_cancellation",
      BOOKING_RESCHEDULED: "booking_rescheduled",
      ADMIN_ALERT: "admin_alert",
    };
  }

  /**
   * Enviar notificaci√≥n de confirmaci√≥n de reserva
   */
  async sendBookingConfirmation(booking, client) {
    try {
      logger.info("üìß Enviando confirmaci√≥n de reserva", {
        bookingId: booking.id_reserva,
        clientPhone: client.telefono,
      });

      const message = this.buildBookingConfirmationMessage(booking, client);

      const result = await this.sendWhatsAppMessage(client.telefono, message);

      // Registrar notificaci√≥n en BD
      await notificationModel.create({
        recipient_phone: client.telefono,
        message_type: this.templates.BOOKING_CONFIRMATION,
        content: message,
        status: result.success ? "sent" : "failed",
        booking_id: booking.id_reserva,
      });

      return result;
    } catch (error) {
      logger.error("‚ùå Error enviando confirmaci√≥n de reserva:", error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Enviar recordatorio de cita
   */
  async sendBookingReminder(booking, client, timeframe = '24 horas') {
    try {
      logger.info("‚è∞ Enviando recordatorio de cita", {
        bookingId: booking.id || booking.id_reserva,
        clientPhone: client.phone || client.telefono,
        timeframe
      });

      const message = this.buildBookingReminderMessage(booking, client, timeframe);

      const result = await this.sendWhatsAppMessage(client.phone || client.telefono, message);

      await notificationModel.create({
        recipient_phone: client.phone || client.telefono,
        message_type: timeframe === '24 horas' ? 'booking_reminder_24h' : 'booking_reminder_2h',
        content: message,
        status: result.success ? "sent" : "failed",
        booking_id: booking.id || booking.id_reserva,
      });

      return result;
    } catch (error) {
      logger.error("‚ùå Error enviando recordatorio:", error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Notificar cancelaci√≥n de cita
   */
  async sendBookingCancellation(booking, client, reason = "") {
    try {
      logger.info("‚ùå Enviando notificaci√≥n de cancelaci√≥n", {
        bookingId: booking.id_reserva,
        clientPhone: client.telefono,
      });

      const message = this.buildBookingCancellationMessage(
        booking,
        client,
        reason,
      );

      const result = await this.sendWhatsAppMessage(client.telefono, message);

      await notificationModel.create({
        recipient_phone: client.telefono,
        message_type: this.templates.BOOKING_CANCELLATION,
        content: message,
        status: result.success ? "sent" : "failed",
        booking_id: booking.id_reserva,
      });

      return result;
    } catch (error) {
      logger.error("‚ùå Error enviando cancelaci√≥n:", error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Notificar reprogramaci√≥n de cita
   */
  async sendBookingReschedule(booking, client, oldDate, newDate) {
    try {
      logger.info("üîÑ Enviando notificaci√≥n de reprogramaci√≥n", {
        bookingId: booking.id_reserva,
        clientPhone: client.telefono,
      });

      const message = this.buildBookingRescheduleMessage(
        booking,
        client,
        oldDate,
        newDate,
      );

      const result = await this.sendWhatsAppMessage(client.telefono, message);

      await notificationModel.create({
        recipient_phone: client.telefono,
        message_type: this.templates.BOOKING_RESCHEDULED,
        content: message,
        status: result.success ? "sent" : "failed",
        booking_id: booking.id_reserva,
      });

      return result;
    } catch (error) {
      logger.error("‚ùå Error enviando reprogramaci√≥n:", error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Enviar alerta al administrador
   */
  async sendAdminAlert(message, priority = "normal") {
    try {
      logger.info("üö® Enviando alerta al administrador", { priority });

      const adminPhone =
        process.env.ADMIN_PHONE || process.env.TWILIO_WHATSAPP_NUMBER;
      const alertMessage = `üö® ALERTA SISTEMA\n\n${message}\n\nPrioridad: ${priority.toUpperCase()}\nFecha: ${new Date().toLocaleString(
        "es-ES",
      )}`;

      const result = await this.sendWhatsAppMessage(adminPhone, alertMessage);

      await notificationModel.create({
        recipient_phone: adminPhone,
        message_type: this.templates.ADMIN_ALERT,
        content: alertMessage,
        status: result.success ? "sent" : "failed",
        priority,
      });

      return result;
    } catch (error) {
      logger.error("‚ùå Error enviando alerta admin:", error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Enviar mensaje de WhatsApp
   */
  async sendWhatsAppMessage(phone, message) {
    try {
      // Formatear n√∫mero de tel√©fono
      const formattedPhone = this.formatPhoneNumber(phone);

      const result = await twilioClient.messages.create({
        from: process.env.TWILIO_WHATSAPP_NUMBER,
        to: `whatsapp:${formattedPhone}`,
        body: message,
      });

      logger.info("‚úÖ Mensaje WhatsApp enviado", {
        to: formattedPhone,
        sid: result.sid,
      });

      return {
        success: true,
        messageId: result.sid,
        to: formattedPhone,
      };
    } catch (error) {
      logger.error("‚ùå Error enviando WhatsApp:", error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Construir mensaje de confirmaci√≥n de reserva
   */
  buildBookingConfirmationMessage(booking, client) {
    const fecha = new Date(booking.fecha_hora).toLocaleDateString("es-ES", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    const hora = new Date(booking.fecha_hora).toLocaleTimeString("es-ES", {
      hour: "2-digit",
      minute: "2-digit",
    });

    return `‚úÖ *CITA CONFIRMADA*

Hola ${client.nombre}, tu cita ha sido confirmada:

üìÖ *Fecha:* ${fecha}
üïê *Hora:* ${hora}
üíá‚Äç‚ôÄÔ∏è *Servicio:* ${booking.servicio_nombre}
üí∞ *Precio:* ‚Ç¨${booking.precio}
‚è±Ô∏è *Duraci√≥n:* ${booking.duracion} minutos

üìç *Ubicaci√≥n:* Ricardo Buritic√° Beauty Studio

Si necesitas cancelar o reprogramar, cont√°ctame con al menos 24h de antelaci√≥n.

¬°Te espero! ‚ú®`;
  }

  /**
   * Construir mensaje de recordatorio
   */
  buildBookingReminderMessage(booking, client, timeframe = '24 horas') {
    // Manejar diferentes formatos de fecha
    let appointmentDate;
    if (booking.appointment_date && booking.appointment_time) {
      appointmentDate = new Date(booking.appointment_date + ' ' + booking.appointment_time);
    } else if (booking.fecha_hora) {
      appointmentDate = new Date(booking.fecha_hora);
    } else {
      appointmentDate = new Date();
    }

    const fecha = appointmentDate.toLocaleDateString("es-ES", {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    const hora = appointmentDate.toLocaleTimeString("es-ES", {
      hour: "2-digit",
      minute: "2-digit",
    });

    const clientName = client.name || client.nombre;
    const serviceName = booking.service_name || booking.servicio_nombre;
    const timeText = timeframe === '24 horas' ? 'ma√±ana' : 'en 2 horas';

    return `‚è∞ *RECORDATORIO DE CITA*

Hola ${clientName}, te recuerdo tu cita ${timeText}:

üìÖ *${fecha}*
üïê *Hora:* ${hora}
üíá‚Äç‚ôÄÔ∏è *Servicio:* ${serviceName}

${timeframe === '2 horas' ? 
  'üö® *¬°Tu cita es en 2 horas!*\n\nPor favor, confirma tu asistencia.' : 
  'Por favor, confirma tu asistencia respondiendo a este mensaje.'
}

üìç *Ubicaci√≥n:* Ricardo Buritic√° Beauty Studio

¬°Te espero! ‚ú®

_Ricardo Buritic√° Beauty Consulting_
_Peluquer√≠a Consciente_`;
  }

  /**
   * Construir mensaje de cancelaci√≥n
   */
  buildBookingCancellationMessage(booking, client, reason) {
    return `‚ùå *CITA CANCELADA*

Hola ${client.nombre}, tu cita ha sido cancelada:

üìÖ *Fecha:* ${new Date(booking.fecha_hora).toLocaleDateString("es-ES")}
üïê *Hora:* ${new Date(booking.fecha_hora).toLocaleTimeString("es-ES")}
üíá‚Äç‚ôÄÔ∏è *Servicio:* ${booking.servicio_nombre}

${reason ? `*Motivo:* ${reason}\n` : ""}
Para reagendar, cont√°ctame cuando gustes.

Gracias por tu comprensi√≥n üôè`;
  }

  /**
   * Construir mensaje de reprogramaci√≥n
   */
  buildBookingRescheduleMessage(booking, client, oldDate, newDate) {
    return `üîÑ *CITA REPROGRAMADA*

Hola ${client.nombre}, tu cita ha sido reprogramada:

‚ùå *Fecha anterior:* ${new Date(oldDate).toLocaleDateString("es-ES")}
‚úÖ *Nueva fecha:* ${new Date(newDate).toLocaleDateString("es-ES")}
üïê *Hora:* ${new Date(newDate).toLocaleTimeString("es-ES")}
üíá‚Äç‚ôÄÔ∏è *Servicio:* ${booking.servicio_nombre}

¬°Te espero en la nueva fecha! ‚ú®`;
  }

  /**
   * Formatear n√∫mero de tel√©fono
   */
  formatPhoneNumber(phone) {
    // Remover espacios y caracteres especiales
    let cleaned = phone.replace(/\D/g, "");

    // Si no empieza con c√≥digo de pa√≠s, asumir Espa√±a (+34)
    if (!cleaned.startsWith("34") && cleaned.length === 9) {
      cleaned = "34" + cleaned;
    }

    return "+" + cleaned;
  }

  /**
   * Obtener estad√≠sticas de notificaciones
   */
  async getNotificationStats(dateFrom, dateTo) {
    try {
      const stats = await notificationModel.getStats(dateFrom, dateTo);
      return { success: true, data: stats };
    } catch (error) {
      logger.error(
        "‚ùå Error obteniendo estad√≠sticas de notificaciones:",
        error,
      );
      return { success: false, error: error.message };
    }
  }
}

module.exports = new NotificationService();
