// src/middleware/whatsappErrorHandler.js
// Middleware especializado para manejo de errores de WhatsApp

const whatsappValidationService = require("../services/whatsappValidationService");
const notificationService = require("../services/notificationService");
const logger = require("../utils/logger");

class WhatsAppErrorHandler {
  /**
   * Middleware para manejar errores de env√≠o de WhatsApp
   */
  static async handleSendError(error, context = {}) {
    try {
      const interpretation =
        whatsappValidationService.interpretTwilioError(error);

      logger.error("üö® Error de WhatsApp manejado", {
        ...context,
        error: {
          code: interpretation.code,
          type: interpretation.type,
          message: interpretation.message,
          canRetry: interpretation.canRetry,
          action: interpretation.action,
        },
      });

      // Acciones autom√°ticas seg√∫n el tipo de error
      await WhatsAppErrorHandler.executeAutomaticActions(
        interpretation,
        context
      );

      return {
        handled: true,
        interpretation,
        shouldRetry: interpretation.canRetry,
        userMessage: interpretation.userMessage,
      };
    } catch (handlingError) {
      logger.error("‚ùå Error manejando error de WhatsApp:", handlingError);
      return {
        handled: false,
        error: handlingError.message,
        shouldRetry: false,
        userMessage: "Error t√©cnico. Contacta al administrador.",
      };
    }
  }

  /**
   * Ejecutar acciones autom√°ticas seg√∫n el tipo de error
   */
  static async executeAutomaticActions(interpretation, context) {
    try {
      switch (interpretation.type) {
        case "SENDER":
          await WhatsAppErrorHandler.handleSenderError(interpretation, context);
          break;

        case "RECIPIENT":
          await WhatsAppErrorHandler.handleRecipientError(
            interpretation,
            context
          );
          break;

        case "FORMAT":
          await WhatsAppErrorHandler.handleFormatError(interpretation, context);
          break;

        case "CONTENT":
          await WhatsAppErrorHandler.handleContentError(
            interpretation,
            context
          );
          break;

        case "LIMITS":
          await WhatsAppErrorHandler.handleLimitsError(interpretation, context);
          break;

        default:
          logger.info("‚ÑπÔ∏è Error de WhatsApp sin acci√≥n autom√°tica espec√≠fica", {
            type: interpretation.type,
            code: interpretation.code,
          });
      }
    } catch (actionError) {
      logger.error("‚ùå Error ejecutando acci√≥n autom√°tica:", actionError);
    }
  }

  /**
   * Manejar errores del n√∫mero remitente (Twilio)
   */
  static async handleSenderError(interpretation, context) {
    const adminMessage = `üö® PROBLEMA CON N√öMERO DE TWILIO WHATSAPP

C√≥digo de error: ${interpretation.code}
Problema: ${interpretation.message}
Acci√≥n requerida: ${interpretation.action}

Contexto:
- N√∫mero destinatario: ${context.phone || "No disponible"}
- Timestamp: ${new Date().toISOString()}

Este es un problema de configuraci√≥n que requiere atenci√≥n inmediata.`;

    // Notificar al administrador
    await WhatsAppErrorHandler.notifyAdmin(adminMessage, "CRITICAL");

    logger.error("üö® Error cr√≠tico del n√∫mero remitente de Twilio", {
      code: interpretation.code,
      action: interpretation.action,
    });
  }

  /**
   * Manejar errores del n√∫mero destinatario
   */
  static async handleRecipientError(interpretation, context) {
    logger.warn("‚ö†Ô∏è Problema con n√∫mero destinatario", {
      code: interpretation.code,
      phone: context.phone,
      action: interpretation.action,
    });

    // Si el n√∫mero no tiene WhatsApp, marcar en base de datos
    if (interpretation.code === "63003") {
      await WhatsAppErrorHandler.markPhoneAsInvalid(
        context.phone,
        "NO_WHATSAPP"
      );
    }

    // Si el n√∫mero est√° bloqueado, marcar como bloqueado
    if (interpretation.code === "63004") {
      await WhatsAppErrorHandler.markPhoneAsInvalid(context.phone, "BLOCKED");
    }
  }

  /**
   * Manejar errores de formato
   */
  static async handleFormatError(interpretation, context) {
    logger.warn("‚ö†Ô∏è Error de formato de n√∫mero", {
      code: interpretation.code,
      originalPhone: context.phone,
      action: interpretation.action,
    });

    // Intentar correcci√≥n autom√°tica si es posible
    if (context.phone) {
      const corrected = WhatsAppErrorHandler.attemptPhoneCorrection(
        context.phone
      );
      if (corrected && corrected !== context.phone) {
        logger.info("üîß Intento de correcci√≥n autom√°tica de n√∫mero", {
          original: context.phone,
          corrected: corrected,
        });

        // Aqu√≠ podr√≠as reintentar con el n√∫mero corregido
        // Pero es mejor notificar para revisi√≥n manual
      }
    }
  }

  /**
   * Manejar errores de contenido
   */
  static async handleContentError(interpretation, context) {
    logger.warn("‚ö†Ô∏è Problema con contenido del mensaje", {
      code: interpretation.code,
      messageLength: context.messageLength,
      action: interpretation.action,
    });

    const adminMessage = `‚ö†Ô∏è MENSAJE WHATSAPP RECHAZADO POR CONTENIDO

C√≥digo de error: ${interpretation.code}
Problema: ${interpretation.message}
Destinatario: ${context.phone || "No disponible"}
Longitud del mensaje: ${context.messageLength || "No disponible"}

Revisar contenido del mensaje para cumplir pol√≠ticas de WhatsApp.`;

    await WhatsAppErrorHandler.notifyAdmin(adminMessage, "HIGH");
  }

  /**
   * Manejar errores de l√≠mites
   */
  static async handleLimitsError(interpretation, context) {
    logger.warn("‚ö†Ô∏è L√≠mite de WhatsApp alcanzado", {
      code: interpretation.code,
      action: interpretation.action,
    });

    // Implementar rate limiting m√°s estricto temporalmente
    await WhatsAppErrorHandler.implementTemporaryRateLimit(context.phone);

    const adminMessage = `‚ö†Ô∏è L√çMITE DE WHATSAPP ALCANZADO

C√≥digo de error: ${interpretation.code}
Problema: ${interpretation.message}
Acci√≥n: ${interpretation.action}

Se ha implementado rate limiting temporal.`;

    await WhatsAppErrorHandler.notifyAdmin(adminMessage, "MEDIUM");
  }

  /**
   * Marcar tel√©fono como inv√°lido en base de datos
   */
  static async markPhoneAsInvalid(phone, reason) {
    try {
      // Aqu√≠ implementar√≠as la l√≥gica para marcar el tel√©fono en BD
      logger.info("üìù Marcando tel√©fono como inv√°lido", {
        phone: WhatsAppErrorHandler.sanitizePhone(phone),
        reason,
      });

      // Ejemplo de implementaci√≥n:
      // await clientModel.updatePhoneStatus(phone, 'INVALID', reason);
    } catch (error) {
      logger.error("‚ùå Error marcando tel√©fono como inv√°lido:", error);
    }
  }

  /**
   * Implementar rate limiting temporal
   */
  static async implementTemporaryRateLimit(phone) {
    try {
      // Implementar l√≥gica de rate limiting temporal
      logger.info("üö¶ Implementando rate limiting temporal", {
        phone: WhatsAppErrorHandler.sanitizePhone(phone),
      });

      // Ejemplo: guardar en cache/BD con TTL
    } catch (error) {
      logger.error("‚ùå Error implementando rate limiting:", error);
    }
  }

  /**
   * Intentar correcci√≥n autom√°tica de n√∫mero
   */
  static attemptPhoneCorrection(phone) {
    try {
      // Limpiar n√∫mero
      let cleaned = phone.replace(/\D/g, "");

      // Correcciones comunes
      if (cleaned.startsWith("0034")) {
        cleaned = cleaned.substring(2); // Remover 00
      }

      if (cleaned.startsWith("0") && cleaned.length === 10) {
        cleaned = "34" + cleaned.substring(1); // 0612345678 -> 34612345678
      }

      if (cleaned.length === 9 && cleaned.match(/^[6-9]/)) {
        cleaned = "34" + cleaned; // 612345678 -> 34612345678
      }

      return "+" + cleaned;
    } catch (error) {
      logger.error("‚ùå Error corrigiendo n√∫mero:", error);
      return phone;
    }
  }

  /**
   * Notificar al administrador
   */
  static async notifyAdmin(message, priority = "MEDIUM") {
    try {
      // Usar el servicio de notificaciones existente
      const notificationService = require("../services/notificationService");
      await notificationService.sendAdminAlert(message, priority.toLowerCase());
    } catch (error) {
      logger.error("‚ùå Error notificando al administrador:", error);
    }
  }

  /**
   * Sanitizar tel√©fono para logs
   */
  static sanitizePhone(phone) {
    if (!phone || typeof phone !== "string") return "[INVALID]";

    const cleaned = phone.replace(/\D/g, "");
    if (cleaned.length < 6) return "[TOO_SHORT]";

    const start = cleaned.substring(0, 3);
    const end = cleaned.substring(cleaned.length - 2);
    const middle = "*".repeat(Math.max(0, cleaned.length - 5));

    return `+${start}${middle}${end}`;
  }

  /**
   * Obtener estad√≠sticas de errores de WhatsApp
   */
  static async getErrorStats(timeframe = "24h") {
    try {
      // Implementar l√≥gica para obtener estad√≠sticas de errores
      // desde logs o base de datos

      return {
        timeframe,
        totalErrors: 0,
        errorsByType: {},
        errorsBySeverity: {},
        mostCommonErrors: [],
      };
    } catch (error) {
      logger.error("‚ùå Error obteniendo estad√≠sticas:", error);
      return null;
    }
  }
}

module.exports = WhatsAppErrorHandler;
