// scripts/fixServiceCategories.js
// Script para corregir inconsistencias en categor√≠as de servicios

require("dotenv").config({ path: ".env" });
require("dotenv").config({ path: ".env.local" });

const supabaseClient = require("../src/integrations/supabaseClient");

async function fixServiceCategories() {
  console.log("üîß CORRIGIENDO INCONSISTENCIAS EN CATEGOR√çAS DE SERVICIOS");
  console.log("=====================================================\n");

  try {
    // 1. Verificar estado actual
    console.log("üìä Estado actual de categor√≠as:");
    const { data: currentServices, error: fetchError } = await supabaseClient
      .from("servicios")
      .select("id_servicio, nombre, categoria")
      .order("categoria");

    if (fetchError) throw fetchError;

    // Contar por categor√≠a
    const categoryCount = {};
    currentServices.forEach((service) => {
      categoryCount[service.categoria] =
        (categoryCount[service.categoria] || 0) + 1;
    });

    console.log("Categor√≠as encontradas:");
    Object.entries(categoryCount).forEach(([cat, count]) => {
      console.log(`  - ${cat}: ${count} servicios`);
    });
    console.log("");

    // 2. Definir mapeo de correcciones
    const categoryMapping = {
      Asesor√≠a: "ASESOR√çA",
      Hidrataci√≥n: "TRATAMIENTO",
      tratamientos_capilares: "TRATAMIENTO",
      cortes: "CORTE",
      coloracion: "COLORACI√ìN",
    };

    // 3. Aplicar correcciones
    console.log("üîÑ Aplicando correcciones:");

    for (const [oldCategory, newCategory] of Object.entries(categoryMapping)) {
      const servicesToUpdate = currentServices.filter(
        (s) => s.categoria === oldCategory,
      );

      if (servicesToUpdate.length > 0) {
        console.log(
          `\nüìù Actualizando "${oldCategory}" ‚Üí "${newCategory}" (${servicesToUpdate.length} servicios)`,
        );

        for (const service of servicesToUpdate) {
          console.log(`   - ${service.nombre}`);
        }

        const { error: updateError } = await supabaseClient
          .from("servicios")
          .update({ categoria: newCategory })
          .eq("categoria", oldCategory);

        if (updateError) {
          console.error(`‚ùå Error actualizando ${oldCategory}:`, updateError);
        } else {
          console.log(
            `‚úÖ ${servicesToUpdate.length} servicios actualizados correctamente`,
          );
        }
      }
    }

    // 4. Verificar resultado final
    console.log("\nüìä Estado final de categor√≠as:");
    const { data: finalServices, error: finalError } = await supabaseClient
      .from("servicios")
      .select("categoria")
      .order("categoria");

    if (finalError) throw finalError;

    const finalCategoryCount = {};
    finalServices.forEach((service) => {
      finalCategoryCount[service.categoria] =
        (finalCategoryCount[service.categoria] || 0) + 1;
    });

    console.log("Categor√≠as finales:");
    Object.entries(finalCategoryCount).forEach(([cat, count]) => {
      console.log(`  ‚úÖ ${cat}: ${count} servicios`);
    });

    // 5. Validar que solo tenemos las 4 categor√≠as correctas
    const expectedCategories = [
      "ASESOR√çA",
      "COLORACI√ìN",
      "CORTE",
      "TRATAMIENTO",
    ];
    const actualCategories = Object.keys(finalCategoryCount);

    const unexpectedCategories = actualCategories.filter(
      (cat) => !expectedCategories.includes(cat),
    );

    if (unexpectedCategories.length === 0) {
      console.log("\nüéâ ¬°CORRECCI√ìN COMPLETADA EXITOSAMENTE!");
      console.log("‚úÖ Todas las categor√≠as est√°n normalizadas");
      console.log("‚úÖ Solo existen las 4 categor√≠as est√°ndar");
      console.log("‚úÖ El portal cliente funcionar√° correctamente");
    } else {
      console.log("\n‚ö†Ô∏è A√∫n hay categor√≠as no est√°ndar:");
      unexpectedCategories.forEach((cat) => {
        console.log(`   - ${cat}`);
      });
    }
  } catch (error) {
    console.error("‚ùå Error durante la correcci√≥n:", error);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  fixServiceCategories()
    .then(() => {
      console.log("\n‚úÖ Script completado");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Error fatal:", error);
      process.exit(1);
    });
}

module.exports = { fixServiceCategories };
