/**
 * DESARROLLO R√ÅPIDO CON NGROK
 *
 * Inicia el servidor en modo desarrollo con ngrok autom√°tico
 * Compatible con el flujo de trabajo existente
 */

const { spawn } = require("child_process");
const path = require("path");

console.log("üöÄ ASISTENTE RB - DESARROLLO R√ÅPIDO CON NGROK");
console.log("‚ö° Iniciando servidor y t√∫nel...\n");

// Verificar configuraci√≥n
const { ConfigCache } = require("./src/config/config-cache");
const cachedConfig = ConfigCache.load();

if (!cachedConfig.valid) {
  console.error("‚ùå Configuraci√≥n inv√°lida. Ejecuta: npm run config:init");
  process.exit(1);
}

console.log("‚úÖ Configuraci√≥n v√°lida");

// Funci√≥n para iniciar ngrok
function startNgrok() {
  console.log("üåê Iniciando t√∫nel ngrok...");

  const ngrokProcess = spawn(
    "cmd",
    [
      "/k",
      "echo üåê INICIANDO TUNEL NGROK... && " +
        "echo üì± URL: https://ricardoburitica.ngrok.app && " +
        "ngrok http 3000 --domain=ricardoburitica.ngrok.app",
    ],
    {
      detached: true,
      stdio: "ignore",
    }
  );

  ngrokProcess.unref();

  console.log("‚úÖ T√∫nel ngrok iniciado en ventana separada");
  return ngrokProcess;
}

// Funci√≥n para iniciar el servidor
function startServer() {
  console.log("üöÄ Iniciando servidor de desarrollo...");

  const serverProcess = spawn("node", ["src/quick-start.js"], {
    stdio: "inherit",
    env: { ...process.env, NODE_ENV: "development" },
  });

  return serverProcess;
}

// Funci√≥n principal
async function main() {
  try {
    // Esperar un poco para que ngrok se establezca
    console.log("‚è≥ Esperando 3 segundos para sincronizaci√≥n...");
    await new Promise((resolve) => setTimeout(resolve, 3000));

    // Iniciar ngrok primero
    const ngrokProcess = startNgrok();

    // Esperar un poco m√°s para que ngrok se establezca
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // Iniciar servidor
    const serverProcess = startServer();

    // Mostrar informaci√≥n
    setTimeout(() => {
      console.log("\n" + "=".repeat(60));
      console.log("üéâ DESARROLLO INICIADO CORRECTAMENTE");
      console.log("=".repeat(60));
      console.log("üåê Local: http://localhost:3000");
      console.log("üåç P√∫blico: https://ricardoburitica.ngrok.app");
      console.log("üì± WhatsApp: Configurado");
      console.log("üìÖ Calendly: Integrado");
      console.log("ü§ñ IA: OpenAI GPT-4");
      console.log("\nüîó ENDPOINTS PRINCIPALES:");
      console.log("   üìä Health: /health");
      console.log("   üì± WhatsApp: /webhook/whatsapp");
      console.log("   üìÖ Calendly: /api/calendly/webhook");
      console.log("   üîß Admin: /admin");
      console.log("\nüí° Presiona Ctrl+C para detener ambos servicios");
      console.log("=".repeat(60));
    }, 5000);

    // Manejo de cierre
    process.on("SIGINT", () => {
      console.log("\nüõë Cerrando servicios...");

      if (serverProcess) {
        serverProcess.kill("SIGTERM");
      }

      // Intentar cerrar ngrok (aunque est√© en ventana separada)
      try {
        spawn("taskkill", ["/f", "/im", "ngrok.exe"], { stdio: "ignore" });
      } catch (error) {
        // Ignorar errores al cerrar ngrok
      }

      console.log("‚úÖ Servicios cerrados");
      process.exit(0);
    });

    process.on("SIGTERM", () => {
      console.log("\nüõë Cerrando servicios...");

      if (serverProcess) {
        serverProcess.kill("SIGTERM");
      }

      process.exit(0);
    });

    // Mantener el proceso principal vivo
    serverProcess.on("exit", (code) => {
      if (code !== 0) {
        console.error(`‚ùå Servidor cerrado con c√≥digo ${code}`);
        process.exit(code);
      }
    });
  } catch (error) {
    console.error("‚ùå Error iniciando desarrollo:", error.message);
    process.exit(1);
  }
}

// Ejecutar
main();
